#Taken from leetcode challenge # 1524
#This will take a list of arrays and return the number of subarrays with a sum that is odd
#This is done by isolating the numbers within the array whose values are odd, since that is key to finding the odd arrays. Since a sum must contain some odd value of odd numbers
#We simply find all subarrays which have an odd value of odd numbers and sum their total
#This is dont by creating a new array which has 3 values, first is the number of even numbers to the left of the odd number (we don't care too much about even numbers since
#they don't ultimately affect the sum, only odds do), the second number is the index, and the third of the number of even numbers to the right of the odd number.
#By finding the combinations of all odd-numbed odd sums, using this new array as a metric, we can easily find the sum of all odd numbers fairly easily a couple for-loops and
#the subfunction defined below

class Solution:
    def numOfSubarrays(self, arr: List[int]) -> int:
        oddArr = []
        evenRow = 0
        temp = 0
        total = 0
        
        #Subfunction takes the new array list containing all odd locations and how many evens there are to the right and left and returns the number of combinations
        #of subarrays we can get an odd sum from.
        def getNumber(start, end, array):
            numSubs = 1
            if array[start][0] == 0 and array[end][2] == 0:
                return numSubs
            elif array[start][0] == 0:
                numSubs += array[end][2]
            elif array[end][2] == 0:
                numSubs += array[start][0]
            else:
                numSubs = (array[start][0] + 1) * (array[end][2] + 1)
            return numSubs
        
        for i in range(len(arr)):
            if arr[i] % 2 != 0:
                oddArr.append([evenRow, i, 0])
                if len(oddArr) > 1:
                    oddArr[len(oddArr) - 2][2] = evenRow
                evenRow = 0
            else:
                evenRow += 1
        if len(oddArr) == 0:
            return 0
        oddArr[len(oddArr) - 1][2] = evenRow
        
        for i in range(1, len(oddArr) + 1, 2):
            lowerEnd = 0
            upperEnd = lowerEnd + i - 1
            while upperEnd < len(oddArr):
                total += getNumber(lowerEnd, upperEnd, oddArr)
                lowerEnd += 1
                upperEnd += 1
                
        return total
